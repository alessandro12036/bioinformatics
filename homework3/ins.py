def insertion_sort(l):
    swaps = 0
    for i in range(1, len(l)):
        j = i
        while j > 0 and l[j-1] > l[j]:
            l[j], l[j-1] = l[j-1], l[j]
            j -= 1
            swaps += 1
    return swaps


if __name__ == "__main__":
    s = "75404 -15933 -74255 87599 62836 88395 38965 -96240 -53506 35705 18911 4657 -76886 -89121 95017 45881 36401 -16100 63414 -60062 27226 23862 13900 -98835 -29757 81927 79285 33099 68744 -17013 -50550 48370 58732 83508 75313 -30018 76584 53344 -52369 -44036 6614 12155 44277 79217 445 62600 -38915 -83325 18729 -9697 -24018 11714 52533 13859 41936 -43262 72012 -88148 -86560 45575 -40115 -72314 -75755 -35326 73799 38255 50713 -8932 -69792 33359 -15115 -41891 -8359 -43860 31791 -11137 89242 -4792 65001 -1160 13573 -98521 -77460 51812 -26317 -32852 71885 46289 26482 -91590 -51206 74696 41577 -89134 76391 -64036 41823 63269 85735 4062 -29454 -18985 -65497 -53362 7884 60548 -65095 -90602 22663 -24969 -54867 -72155 -68436 57668 19665 -58610 -27561 -2847 -46085 -65523 67157 14620 96039 33574 -53162 37345 81972 -68578 -63441 -37338 54221 84624 -19413 34821 95244 -621 -18171 5669 -63379 -70159 38294 -41679 75329 9163 51287 -44474 39335 -49833 -61399 -73404 -73277 98352 94729 57634 -42880 -78245 -28144 -16103 -42520 -89062 37312 -98345 -43347 59589 97539 -12111 97987 78260 -28742 27600 -82957 33583 -80083 54242 -69577 65908 26458 -99805 -70441 55799 69542 47692 -62906 -51391 -29155 -76074 -39718 11963 -98231 14888 57425 53630 42543 48760 77316 -66155 26170 -47377 -85512 78828 28060 -33103 12281 3124 68137 -82234 -25809 -54782 -63446 87484 91817 -99041 -63807 3868 58079 -99363 -84309 74784 -22288 47062 -6791 72329 -74876 65061 83635 73947 95469 -80145 -3949 61574 -72101 -50027 -5459 89976 -31714 47335 4272 80623 79712 55667 35200 24922 27719 -370 52576 -89075 -58062 -28192 75524 71882 -82646 -63813 90514 -39806 61502 -38447 24232 -74716 8042 -37648 85472 -4912 86018 -87729 20024 -71426 -89654 43932 16682 85492 85905 80517 99976 69650 33521 -54081 -77249 23231 -32235 73551 -89030 -98170 25048 -88668 -11980 -98002 62114 63408 -91256 -16691 45210 -80789 -30799 -61409 -20437 86294 35748 -71835 98555 -77861 -82622 -84143 -16273 -39802 80878 62409 -35139 71098 -77418 -97277 30884 4084 -87588 -64795 59469 91230 -97879 -38630 -98177 43282 75575 43939 54777 75660 41105 54367 -42293 14315 37960 -70623 -49131 -44767 -36670 -79123 -90995 3786 60288 -86758 82314 -22376 34563 -90342 -40887 72404 24718 -73529 -75775 25794 -90852 24462 -55583 -83789 6259 -43934 83234 -82816 60939 83978 72021 -64611 -67805 -70651 -79228 52176 -93078 -8862 -31782 97192 46272 92691 11729 -65284 16607 88370 -61396 97249 8241 39411 94867 -4115 95781 -69815 -5064 29358 -89724 -54737 41468 68708 36387 51065 -56578 -18781 45879 -14590 34873 49314 -88516 72556 74227 -81838 2864 77558 -11714 75251 -30969 26434 -97356 -90583 -96316 68218 -14263 -40328 -7804 94823 -37951 -40671 -33652 -97649 69000 -33468 79859 -20982 36437 -85681 1809 72077 91421 -41511 79169 -77577 1143 28938 75084 81341 4258 88616 -89106 73662 -89957 -93416 85371 39473 -64847 -14606 55649 -43792 -32674 56713 -88043 -51492 56748 88977 -86884 -2827 58430 63450 79985 178 -71348 5664 -67876 -79102 34781 -32254 -25235 -57229 -29420 -33646 -47831 10026 13633 6621 -92363 -18658 -6922 35470 -45202 38097 97474 86796 -15144 -35209 -71989 27416 76835 -95344 23211 -40550 -43876 79818 75601 37805 -65007 59891 83824 -91043 16654 77548 -68245 93918 -42951 -38707 42050 17839 73934 -91799 -29152 -31742 -68258 -94439 47483 -43972 90467 -20121 83477 81410 -727 82052 -40559 17717 71190 28635 99385 7499 -27605 86868 85890 -13531 33338 54178 -74677 12994 20852 -20430 11322 -12020 33114 -58572 -55989 -77 -16463 -85520 70347 -83684 12519 -4078 15677 -81924 -95723 -98660 39294 -98860 42571 22792 20672 81018 96561 -32540 -29614 67191 -65357 97073 -55697 -53539 -94236 -38779 14947 86254 23022 68485 -18954 -81655 -35059 -64331 82283 54136 -58492 -46020 70460 81031 -53142 -25841 10021 -69655 73306 -89646 55857 42389 -60394 79259 -2142 48744 -66197 -4076 -3639 70809 -97818 63557 50460 32890 -85169 46349 -21625 73858 60574 68374 -80415 57507 64190 -32115 -4717 -93748 -4970 27312 37005 18686 38229 79182 42137 48546 29666 -29847 32005 -60179 9010 -60794 67316 -21156 -13543 22974 -11729 5469 93902 51413 -86330 58032 81232 1625 -39865 73090 -61819 42532 -28027 94580 -46456 44883 83076 -7145 66471 54797 18405 -87404 -49977 564 -14999 -60784 -47196 -80473 3240 63989 63985 -21937 86515 -87932 -53103 -67645 58742 -19677 -95602 -51590 -26345 -33891 93012 -84965 -67918 -89018 86707 -65441 -77181 -10816 -60662 -73856 -47341 -87513 71381 -48502 1443 63321 65088 -51914 -61906 -63443 -96664 77980 -93276 51424 64493 -40061 66007 -43678 32911 67220 20308 -75314 27059 65810 -71956 -27092 -63008 58709 57997 -6803 75644 -24070 64658 33072 21361 -57047 85753 22126 91194 -60113 53922 -52894 75365 60112 75384 98168 13890 -37280 92552 77320 -26262 -90965 -13112 -75916 -65022 -77795 52577 -31326 93103 16046 -28878 38801 62665 54284 57762 62666 28081 92567 -63079 85036 62809 -67008 15762 -89063 36401 83793 31963 -27913 22984 -33536 90932 -57417 -95113 37889 -23080 -68137 -88326 57007 11872 -73931 -45169 -70169 -89339 -84451 69751 7400 26747 -67661 48337 49880 97594 78789 -6248 -32887 83784 -64250 76585 -22176 -15197 -81512 -63937 -37484 -52180 26895 -10912 44503 -47977 -3343 22884 33905 71738 30392 36804 -2821 -61308 82893 -70130 56985 -87578 27478 8806 -61741 -49990 -82994 -31913 91453 15752 11718 39062 -95581 27275 -6941"
    l = list(map(int, s.split()))
    print(insertion_sort(l))